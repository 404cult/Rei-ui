{
  "name": "stack-scroll",
  "type": "registry:ui",
  "dependencies": [
    "motion",
    "framer-motion"
  ],
  "files": [
    {
      "path": "ui/stack-scroll.tsx",
      "content": "\"use client\";\r\n\r\nimport React, { useContext, useEffect, useRef, useState } from \"react\";\r\nimport { motion, useAnimationFrame, useMotionValue, useScroll, useSpring, useTransform, useVelocity } from \"motion/react\";\r\nimport type { MotionValue } from \"motion/react\";\r\n\r\nexport interface ScrollVelocityRowProps extends React.HTMLAttributes<HTMLDivElement> {\r\n  children: React.ReactNode;\r\n  baseVelocity?: number;\r\n  direction?: 1 | -1;\r\n}\r\n\r\n// Utility: Clamp/scroller\r\nexport const wrap = (min: number, max: number, v: number) => {\r\n  const rangeSize = max - min;\r\n  return ((((v - min) % rangeSize) + rangeSize) % rangeSize) + min;\r\n};\r\n\r\nconst ScrollVelocityContext = React.createContext<MotionValue<number> | null>(null);\r\n\r\n// Top-level provider for velocity context\r\nexport function ScrollVelocityContainer({\r\n  children,\r\n  className,\r\n  ...props\r\n}: React.HTMLAttributes<HTMLDivElement>) {\r\n  const { scrollY } = useScroll();\r\n  const scrollVelocity = useVelocity(scrollY);\r\n  const smoothVelocity = useSpring(scrollVelocity, {\r\n    damping: 50,\r\n    stiffness: 400,\r\n  });\r\n  const velocityFactor = useTransform(smoothVelocity, (v) => {\r\n    const sign = v < 0 ? -1 : 1;\r\n    const magnitude = Math.min(5, (Math.abs(v) / 1000) * 5);\r\n    return sign * magnitude;\r\n  });\r\n\r\n  return (\r\n    <ScrollVelocityContext.Provider value={velocityFactor}>\r\n      <div className={`relative w-full${className ? \" \" + className : \"\"}`} {...props}>\r\n        {children}\r\n      </div>\r\n    </ScrollVelocityContext.Provider>\r\n  );\r\n}\r\n\r\nexport function ScrollVelocityRow(props: ScrollVelocityRowProps) {\r\n  const sharedVelocityFactor = useContext(ScrollVelocityContext);\r\n  if (sharedVelocityFactor) {\r\n    return <ScrollVelocityRowImpl {...props} velocityFactor={sharedVelocityFactor} />;\r\n  }\r\n  return <ScrollVelocityRowLocal {...props} />;\r\n}\r\n\r\ninterface ScrollVelocityRowImplProps extends ScrollVelocityRowProps {\r\n  velocityFactor: MotionValue<number>;\r\n}\r\n\r\nfunction ScrollVelocityRowImpl({\r\n  children,\r\n  baseVelocity = 5,\r\n  direction = 1,\r\n  className,\r\n  velocityFactor,\r\n  ...props\r\n}: ScrollVelocityRowImplProps) {\r\n  const containerRef = useRef<HTMLDivElement>(null);\r\n  const blockRef = useRef<HTMLDivElement>(null);\r\n  const [numCopies, setNumCopies] = useState(1);\r\n\r\n  const baseX = useMotionValue(0);\r\n  const baseDirectionRef = useRef<number>(direction >= 0 ? 1 : -1);\r\n  const currentDirectionRef = useRef<number>(direction >= 0 ? 1 : -1);\r\n  const unitWidth = useMotionValue(0);\r\n\r\n  const isInViewRef = useRef(true);\r\n  const isPageVisibleRef = useRef(true);\r\n  const prefersReducedMotionRef = useRef(false);\r\n\r\n  useEffect(() => {\r\n    const container = containerRef.current;\r\n    const block = blockRef.current;\r\n    if (!container || !block) return;\r\n\r\n    const updateSizes = () => {\r\n      const cw = container.offsetWidth || 0;\r\n      const bw = block.scrollWidth || 0;\r\n      unitWidth.set(bw);\r\n      const nextCopies = bw > 0 ? Math.max(3, Math.ceil(cw / bw) + 2) : 1;\r\n      setNumCopies((prev) => (prev === nextCopies ? prev : nextCopies));\r\n    };\r\n\r\n    updateSizes();\r\n\r\n    const ro = new ResizeObserver(updateSizes);\r\n    ro.observe(container);\r\n    ro.observe(block);\r\n\r\n    const io = new IntersectionObserver(([entry]) => {\r\n      isInViewRef.current = entry.isIntersecting;\r\n    });\r\n    io.observe(container);\r\n\r\n    const handleVisibility = () => {\r\n      isPageVisibleRef.current = document.visibilityState === \"visible\";\r\n    };\r\n    document.addEventListener(\"visibilitychange\", handleVisibility, { passive: true });\r\n    handleVisibility();\r\n\r\n    const mq = window.matchMedia(\"(prefers-reduced-motion: reduce)\");\r\n    const handlePRM = () => {\r\n      prefersReducedMotionRef.current = mq.matches;\r\n    };\r\n    mq.addEventListener(\"change\", handlePRM);\r\n    handlePRM();\r\n\r\n    return () => {\r\n      ro.disconnect();\r\n      io.disconnect();\r\n      document.removeEventListener(\"visibilitychange\", handleVisibility);\r\n      mq.removeEventListener(\"change\", handlePRM);\r\n    };\r\n  }, [children, unitWidth]);\r\n\r\n  const x = useTransform([baseX, unitWidth], ([v, bw]) => {\r\n    const width = Number(bw) || 1;\r\n    const offset = Number(v) || 0;\r\n    return `${-wrap(0, width, offset)}px`;\r\n  });\r\n\r\n  useAnimationFrame((_, delta) => {\r\n    if (!isInViewRef.current || !isPageVisibleRef.current) return;\r\n    const dt = delta / 1000;\r\n    const vf = velocityFactor.get();\r\n    const absVf = Math.min(5, Math.abs(vf));\r\n    const speedMultiplier = prefersReducedMotionRef.current ? 1 : 1 + absVf;\r\n\r\n    if (absVf > 0.1) {\r\n      const scrollDirection = vf >= 0 ? 1 : -1;\r\n      currentDirectionRef.current = baseDirectionRef.current * scrollDirection;\r\n    }\r\n\r\n    const bw = unitWidth.get() || 0;\r\n    if (bw <= 0) return;\r\n    const pixelsPerSecond = (bw * baseVelocity) / 100;\r\n    const moveBy =\r\n      currentDirectionRef.current * pixelsPerSecond * speedMultiplier * dt;\r\n    baseX.set(baseX.get() + moveBy);\r\n  });\r\n\r\n  return (\r\n    <div\r\n      ref={containerRef}\r\n      className={`w-full overflow-hidden whitespace-nowrap${className ? \" \" + className : \"\"}`}\r\n      {...props}\r\n    >\r\n      <motion.div\r\n        className=\"inline-flex items-center will-change-transform transform-gpu select-none\"\r\n        style={{ x }}\r\n      >\r\n        {Array.from({ length: numCopies }).map((_, i) => (\r\n          <div\r\n            key={i}\r\n            ref={i === 0 ? blockRef : null}\r\n            aria-hidden={i !== 0}\r\n            className=\"inline-flex shrink-0 items-center\"\r\n          >\r\n            {children}\r\n          </div>\r\n        ))}\r\n      </motion.div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction ScrollVelocityRowLocal(props: ScrollVelocityRowProps) {\r\n  const { scrollY } = useScroll();\r\n  const localVelocity = useVelocity(scrollY);\r\n  const localSmoothVelocity = useSpring(localVelocity, {\r\n    damping: 50,\r\n    stiffness: 400,\r\n  });\r\n  const localVelocityFactor = useTransform(localSmoothVelocity, (v) => {\r\n    const sign = v < 0 ? -1 : 1;\r\n    const magnitude = Math.min(5, (Math.abs(v) / 1000) * 5);\r\n    return sign * magnitude;\r\n  });\r\n  return (\r\n    <ScrollVelocityRowImpl {...props} velocityFactor={localVelocityFactor} />\r\n  );\r\n}\r\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}